import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_decision_regions

class LogisticRegressionGD(object):
  """ Logistic Regression Classifier using gradient descent

  Parameters
  ----------

  eta: float
    Learning rate (between 0.0 and 1.0)
  n_iter: int
    Passes over the training dataset
  random_state: int
    Random number generator seed for the random weight initialization.
  
  Attributes
  ----------

  w_: 1d-array
    Weights after fitting.
  cost_: list
    Sum-of-squares cost function value in each epoch.

  """

  def __init__(self, eta=0.05, n_iter=100, random_state=1):
    self.eta = eta
    self.n_iter = n_iter
    self.random_state = random_state

  def fit(self, X, y):
    """ Fit training data.

    Parameters
    ----------
    X: {array-like}, shape = [n_samples, n_features]
    y: {array-like}, shape = [n_samples]

    Returns
    -------
    self: object

    """

    rgen = np.random.RandomState(self.random_state)
    self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])
    self.cost_ = []

    for _ in range(self.n_iter):
      net_input = self.net_input(X)
      output = self.activation(net_input)
      errors = (y - output)
      self.w_[1:] += self.eta * X.T.dot(errors)
      self.w_[0] += self.eta * errors.sum()

      #Â Now we compute the logistic cost function instead
      # Sum-of-squared-errors
      cost = (-y.dot(np.log(output)) - ((1 - y).dot(np.log(1 - output))))
      self.cost_.append(cost)
    
    return self

  def net_input(self, X):
    """ Calculate the net input """
    return np.dot(X, self.w_[1:]) + self.w_[0]

  def activation(self, z):
    """ Compute the Logistic Sigmoid Activation """
    return 1. / (1. + np.exp(-np.clip(z, -250, 250)))

  def predict(self, X):
    """ Return class label fter unit step """
    return np.where(self.activation(self.net_input(X)) >= 0.5, 1, 0)

def main():
  df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)
  print(df.tail())

  # Select setosa and versicolor
  # |Sepal lenght|Sepal widht|Petal lenght|Petal widht|
  y = df.iloc[0:100, 4].values
  y = np.where(y == 'Iris-setosa', 0, 1) # Watch out!!! => Logistic Regression's output (y) has a range 0 to 1

  # Select sepal and petal lenght
  X = df.iloc[0:100, [0, 2]].values

  # Standardize the features to help the classifier
  X_std = np.copy(X)
  X_std[:,0] = (X[:,0] - X[:,0].mean()) / X[:,0].std()
  X_std[:,1] = (X[:,1] - X[:,1].mean()) / X[:,1].std()

  logisticRegressionGD = LogisticRegressionGD(eta=0.05, n_iter=100, random_state=1)
  logisticRegressionGD.fit(X_std, y)

  plot_decision_regions(X=X_std, y=y, clf=logisticRegressionGD)
  plt.title('Logistic Regression - Gradient Descent')
  plt.xlabel('sepal length')
  plt.ylabel('petal length')
  plt.legend(loc='upper left')
  plt.show()

  plt.plot(range(1, len(logisticRegressionGD.cost_) + 1), logisticRegressionGD.cost_, marker='o')
  plt.xlabel('Iterations')
  plt.ylabel('Sum-squared-error')
  plt.show()

main()
